//1.Write a java program to perform matrix multiplication on two dimensional array. Read matrices A and B from user and store the multiplication in matrix C.
import java.util.Scanner;

public class MatrixMultiplication {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read the dimensions of the first matrix
        System.out.print("Enter the number of rows of matrix A: ");
        int rowsA = scanner.nextInt();
        System.out.print("Enter the number of columns of matrix A: ");
        int colsA = scanner.nextInt();

        // Read the dimensions of the second matrix
        System.out.print("Enter the number of rows of matrix B: ");
        int rowsB = scanner.nextInt();
        System.out.print("Enter the number of columns of matrix B: ");
        int colsB = scanner.nextInt();

        // Check if the matrices can be multiplied
        if (colsA != rowsB) {
            System.out.println("Error: The number of columns of matrix A must be equal to the number of rows of matrix B.");
            return;
        }

        // Initialize the matrices
        int[][] matrixA = new int[rowsA][colsA];
        int[][] matrixB = new int[rowsB][colsB];
        int[][] matrixC = new int[rowsA][colsB];

        // Read the elements of matrix A
        System.out.println("Enter the elements of matrix A:");
        for (int i = 0; i < rowsA; i++) {
            for (int j = 0; j < colsA; j++) {
                matrixA[i][j] = scanner.nextInt();
            }
        }

        // Read the elements of matrix B
        System.out.println("Enter the elements of matrix B:");
        for (int i = 0; i < rowsB; i++) {
            for (int j = 0; j < colsB; j++) {
                matrixB[i][j] = scanner.nextInt();
            }
        }

        // Perform matrix multiplication
        for (int i = 0; i < rowsA; i++) {
            for (int j = 0; j < colsB; j++) {
                int sum = 0;
                for (int k = 0; k < colsA; k++) {
                    sum += matrixA[i][k] * matrixB[k][j];
                }
                matrixC[i][j] = sum;
            }
        }

        // Print the result matrix
        System.out.println("The result matrix C is:");
        for (int i = 0; i < rowsA; i++) {
            for (int j = 0; j < colsB; j++) {
                System.out.print(matrixC[i][j] + " ");
            }
            System.out.println();
        }
    }
}


----------------------------------------------------------------------------------

//2.Write a java program to store and display the transpose of matrix with 4 rows and 6 columns.

public class MatrixTranspose {
    public static void main(String[] args) {
        // Define the original matrix
        int[][] matrix = {
            {1, 2, 3, 4, 5, 6},
            {7, 8, 9, 10, 11, 12},
            {13, 14, 15, 16, 17, 18},
            {19, 20, 21, 22, 23, 24}
        };

        // Define the transpose matrix
        int[][] transpose = new int[6][4];

        // Compute the transpose
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 6; j++) {
                transpose[j][i] = matrix[i][j];
            }
        }

        // Display the original matrix
        System.out.println("Original Matrix:");
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 6; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }

        // Display the transpose matrix
        System.out.println("Transpose Matrix:");
        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < 4; j++) {
                System.out.print(transpose[i][j] + " ");
            }
            System.out.println();
        }
    }
}
---------------------------------------------------------------------------------------------
//3.Write a function in java to check if the number is Armstrong or not.

public static boolean isArmstrong(int number) {
    int originalNumber = number;
    int sum = 0;

    while (number != 0) {
        int digit = number % 10;
        sum += (digit * digit * digit);
        number /= 10;
    }

    if (sum == originalNumber) {
        return true;
    } else {
        return false;
    }
------------------------------------------------------------------------------------------

